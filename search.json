[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Welcome to March Sadness: Using Turnovers Per Possession to Predict the 2024 NCAA Tournament\n\n\n\n\n\n\n\nncaa\n\n\nbasketball\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2024\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nA Lot Changed in 2023, but MLB’s Umpires Stayed the Same\n\n\n\n\n\n\n\nmlb\n\n\numpires\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nNebraska Volleyball’s Recipe for Success: Inside John Cook’s Kitchen\n\n\n\n\n\n\n\nnebraska\n\n\nvolleyball\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nHello.\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nJay Mingo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/inside-cooks-kitchen/index.html",
    "href": "posts/inside-cooks-kitchen/index.html",
    "title": "Nebraska Volleyball’s Recipe for Success: Inside John Cook’s Kitchen",
    "section": "",
    "text": "Nebraska has become synonymous with the word “volleyball”. In over 40 years of existence, the Huskers have never come close to producing a losing season and boast five national championships with four of those five coming since 2000. The man leading the Huskers to their first (and second, third and fourth) national title of the 21st century?\nJohn Cook.\nIn 23 years at the helm, Cook helped Nebraska volleyball solidify itself at the forefront of collegiate volleyball and even more recently, helped pack 92,003 red-clad fans into a football stadium on a late August evening to shatter a world record.\nIt took six years for Cook to win another title with the Huskers, which he did in 2006, before not seeing another title until 2015. Since 2015, he collected another title in 2017 and managed two runner-up finishes in 2018 and 2021.\nA two-decade span of dominance, with no foreseeable end in sight, isn’t an easy feat. So one question remains: how is Cook doing it?\nFirst, a look at how Nebraska has fared in national rankings since 2015:\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggbump)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\nlibrary(gt)\n\n\nranks22 &lt;- read_csv(\"ranks22.csv\") |&gt; mutate(Season = 2022)\nranks21 &lt;- read_csv(\"ranks21.csv\") |&gt; mutate(Season = 2021)\nranks20 &lt;- read_csv(\"ranks20.csv\") |&gt; mutate(Season = 2020)\nranks19 &lt;- read_csv(\"ranks19.csv\") |&gt; mutate(Season = 2019)\nranks18 &lt;- read_csv(\"ranks18.csv\") |&gt; mutate(Season = 2018)\nranks17 &lt;- read_csv(\"ranks17.csv\") |&gt; mutate(Season = 2017)\nranks16 &lt;- read_csv(\"ranks16.csv\") |&gt; mutate(Season = 2016)\nranks15 &lt;- read_csv(\"ranks15.csv\") |&gt; mutate(Season = 2015)\n\nranks &lt;- bind_rows(ranks22, ranks21, ranks20, ranks19, ranks18, ranks17, ranks16, ranks15)\n\nchamps &lt;- c(\"Nebraska\", \"Wisconsin\", \"Stanford\", \"Kentucky\", \"Texas\")\n\nrankings &lt;- ranks |&gt; pivot_longer(cols = starts_with(\"Week\"), names_to = \"Week\", values_to = \"Rank\") |&gt; \n group_by(Team, Season) |&gt; \n    select(Team, Season, Week, Rank)  |&gt; \n  filter(Team %in% champs) |&gt; \n  summarise(\n    AvgRank = mean(Rank)\n  )\n\nggplot() + geom_bump(data=rankings, aes(x=Season, y=AvgRank, color=Team)) +\n   geom_point(data=rankings, aes(x=Season, y=AvgRank, color=Team), size = 4) +\n  scale_color_manual(values = c(\"blue\",  \"#E41C38\", \"red\", \"orange\", \"#C5050C\")) +\n  geom_text(data = rankings |&gt; filter(Season == min(Season)), aes(x = Season - .2, y=AvgRank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = rankings |&gt; filter(Season == max(Season)), aes(x = Season + .2, y=AvgRank, label = Team), size = 3, hjust = 0) +\n  labs(\n    title=\"Nebraska is an undoubted Blue Blood\", \n    subtitle=\"In AVCA polls, the Huskers have remained one of the most consistent of the recent national champions \\n averaging a top-10 ranking in every season since the 2015.\",\n    caption= \"Source: American Volleyball Coaches Association | By Jay Mingo\",\n    y= \"Average Rank\", \n    x = \"Season\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank()\n    ) +\n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) +\n  scale_x_continuous(limits=c(2014,2023)) +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nThe Huskers averaged a top-10 ranking since 2015 and have failed to fall outside of that coveted position. Among the other national champions since 2015, Nebraska has maintained consistency in its rankings and as of the 2022 season, sat behind Texas in average ranking. And in case you missed it: the Longhorns hoisted a trophy at the end of that season.\nThe Huskers have been a good team, a perennial powerhouse, an emblem of volleyball royalty since 2015, sure. But averaging a top-10 ranking isn’t easy, so how exactly has Cook done it?\nThe first part: defense. And let the record state: he digs defense.\n\n\nCode\ndigs23 &lt;- read_csv(\"digs23.csv\") |&gt; mutate(Season = 2023)\ndigs22 &lt;- read_csv(\"digs22.csv\") |&gt; mutate(Season = 2022)\ndigs21 &lt;- read_csv(\"digs21.csv\") |&gt; mutate(Season = 2021)\ndigs20 &lt;- read_csv(\"digs20.csv\") |&gt; mutate(Season = 2020)\ndigs19 &lt;- read_csv(\"digs19.csv\") |&gt; mutate(Season = 2019)\ndigs18 &lt;- read_csv(\"digs18.csv\") |&gt; mutate(Season = 2018)\ndigs17 &lt;- read_csv(\"digs17.csv\") |&gt; mutate(Season = 2017)\ndigs16 &lt;- read_csv(\"digs16.csv\") |&gt; mutate(Season = 2016)\ndigs15 &lt;- read_csv(\"digs15 (2).csv\") |&gt;  mutate(Season = 2015)\n\ndigs &lt;- bind_rows(digs23, digs22, digs21, digs20, digs19, digs18, digs17, digs16, digs15)\n\ndigging &lt;- digs |&gt; \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") |&gt; \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(CA)\", \"CA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(OH)\", \"OH\", School, fixed=TRUE)) |&gt; \n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") |&gt; \n  mutate(Conference=gsub(\")\", \"\", Conference)) |&gt; \n  separate(Ht, into=c(\"Feet\", \"Inches\"), sep=\"-\") |&gt;\n  mutate(Feet = as.numeric(Feet), Inches = as.numeric(Inches)) |&gt; \n  mutate(Height = (Feet*12)+Inches) |&gt; \n  mutate(School = str_trim(School))\n\nset.seed(1234)\n\nstars &lt;- digging |&gt; \n  filter(S &gt; 90 & `Per Set` &gt; 3.5)\n\nneb &lt;- stars |&gt; \n  filter(School == \"Nebraska\")\n\n\nggplot() + \n  geom_beeswarm(data=stars, aes(x=Season, y=Digs), color=\"light grey\") +\n  geom_beeswarm(data=neb, aes(x=Season, y=Digs), color=\"red\") +\n  geom_text_repel(data=neb, aes(x=Season, y=Digs, label=Player)) +\n  geom_hline(yintercept = 524.3218, color=\"darkblue\") +\n  geom_text(aes(x=2019, y=545, label=\"Average Digs since 2015\"), color=\"blue\", size=3.25) + \ntheme_minimal() + \n  labs(\n    x=\"Season\",\n    y=\"Total Digs\", \n    title=\"Nebraska is LiberoU\", \n    subtitle=\"In four of the Huskers' last eight seasons, the play of an Olympic and a future Olympic libero has made \\n all the difference in postseason longevity.\", \n    caption=\"Source: stats.ncaa.com | By Jay Mingo\"\n    ) +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nThe Huskers have produced a pair of highly efficient liberos and when those liberos were digging above the average of total digs in the past eight years, their teams were playing in national championships. When those liberos tallied fewer digs than the average, Nebraska didn’t make it beyond the Final Four. The presence, or respective lack thereof, of these liberos is directly reflected in some of the Huskers’ more successful seasons.\nComplementary performances for Nebraska make up the second part: its front row swings for kills. Here’s the top-10 hitting percentages of Huskers since 2015 and heads up: they’re all middle blockers.\n\n\nCode\nhit23 &lt;- read_csv(\"hitting23.csv\") |&gt; mutate(Season = 2023)\nhit22 &lt;- read_csv(\"hitting22.csv\") |&gt; mutate(Season = 2022)\nhit21 &lt;- read_csv(\"hitting21.csv\") |&gt; mutate(Season = 2021)\nhit20 &lt;- read_csv(\"hitting20.csv\") |&gt; mutate(Season = 2020)\nhit19 &lt;- read_csv(\"hitting19.csv\") |&gt; mutate(Season = 2019)\nhit18 &lt;- read_csv(\"hitting18.csv\") |&gt; mutate(Season = 2018)\nhit17 &lt;- read_csv(\"hitting17.csv\") |&gt; mutate(Season = 2017)\nhit16 &lt;- read_csv(\"hitting16.csv\") |&gt; mutate(Season = 2016)\nhit15 &lt;- read_csv(\"hitting15.csv\") |&gt; mutate(Season = 2015) \n\nhitting &lt;- bind_rows(hit23, hit22, hit21, hit20, hit19, hit18, hit17, hit16, hit15)\n\nattackers &lt;- hitting |&gt; \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") |&gt; \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(CA)\", \"CA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(OH)\", \"OH\", School, fixed=TRUE)) |&gt; \n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") |&gt; \n  mutate(Conference=gsub(\")\", \"\", Conference)) |&gt; \n  mutate(School = str_trim(School))\n\ngbr &lt;- attackers |&gt; \n  filter(School == \"Nebraska\") |&gt; \n  select(Player, Pct., Season, Pos) |&gt; \n  top_n(10, wt=Pct.) |&gt; \n  arrange(desc(Pct.))\n\ngbr |&gt; \n  gt() |&gt;\n  cols_label(\n    Pct. = \"Hitting Percentage\",\n    Pos = \"Position\"\n  ) |&gt; \n  tab_header(\n    title = \"(Front) Row the Boat\", \n    subtitle = \"The Huskers' middles have ushered their teams to postseason success. \\n In 2015 and 2017, Nebraska won a national title. In 2018 and 2021, the Huskers finished runner-up.\")|&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo  |  **Source:** stats.ncaa.org\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"gold\"),\n      cell_text(color = \"black\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2015\")) |&gt;\n   tab_style(\n    style = list(\n      cell_fill(color = \"gold\"),\n      cell_text(color = \"black\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2017\")) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#CD7F32\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2018\")) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"#CD7F32\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2021\"))\n\n\n\n\n\n\n  \n    \n      (Front) Row the Boat\n    \n    \n      The Huskers' middles have ushered their teams to postseason success. \n In 2015 and 2017, Nebraska won a national title. In 2018 and 2021, the Huskers finished runner-up.\n    \n    \n      Player\n      Hitting Percentage\n      Season\n      Position\n    \n  \n  \n    Lauren Stivrins\n0.468\n2020\nMB\n    Lauren Stivrins\n0.421\n2018\nMB\n    Andi Jackson\n0.401\n2023\nMB\n    Kayla Caffey\n0.380\n2020\nMB\n    Lauren Stivrins\n0.374\n2019\nMB\n    Kayla Caffey\n0.363\n2021\nMB\n    Briana Holman\n0.358\n2017\nMB\n    Amber Rolfzen\n0.358\n2015\nMB\n    Briana Holman\n0.350\n2016\nMB\n    Bekka Allick\n0.326\n2022\nMB\n  \n  \n    \n      By: Jay Mingo  |  Source: stats.ncaa.org\n    \n  \n  \n\n\n\n\nIn the four seasons where Nebraska played in the national championship game, middle blockers have been at the forefront of the offensive scheme. Ironically, however, two of the highest performances came in runner-up finishes.\nWhat about now?\nWith several weeks remaining in the regular season, Nebraska is ranked No. 1, libero Lexi Rodriguez is still playing and she’s got a new counterpart in freshman Laney Choboy and that third-ranked middle is a freshman. Not to mention, there is not a single senior on the 2023 team.\nThe ingredients for 2023 are there and the Huskers continue to seek their first perfect season since 2000. Same Cook, different ingredients and the same goals, but only time will tell Cook’s recipe for success."
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "Hello.",
    "section": "",
    "text": "Hi. My name is Jay."
  },
  {
    "objectID": "posts/mlbs-worst-umpire-2023/index.html",
    "href": "posts/mlbs-worst-umpire-2023/index.html",
    "title": "A Lot Changed in 2023, but MLB’s Umpires Stayed the Same",
    "section": "",
    "text": "The 2023 season sought to be a season of numerous changes from the sizes of bases, to pitch clock rules, and playoff format for Major League Baseball and commissioner Rob Manfred.\nThe changes still yield mixed responses from fans of baseball but a common unifying point of contention lies with the men who don the blue and black shirts throughout the season - umpires.\nChanges are arising for penalties, suspensions, firings, robotic umpires and a plethora of other overhauls but one question stands out: who was the worst umpire in the 2023 season and how bad were they?\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\numps &lt;- read_csv(\"umpires23.csv\")\n\nbad &lt;- umps |&gt; \n  filter(G &gt; 20) |&gt; \n  select(Umpire, PC, CC, xCC, CCAx) |&gt; \n  top_n(-10, wt = CCAx) |&gt; \n  arrange(CCAx)\n\nbad |&gt; \n  gt() |&gt; \n  cols_label(\n    PC = \"Pitches Called\",\n    CC = \"Correct Calls\",\n    xCC = \"Expected Correct Calls\",\n    CCAx = \"Correct Calls Above Expected\") |&gt; \n  tab_header(\n    title = \"A League of Their Own\",\n    subtitle = \"Four of the 10 most inaccurate umpires in MLB fell short of the average total of correct calls in 2023 for umpires who spent over 20 games behind the plate.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo |  **Source:** Umpire Scorecards\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt; \n  tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"Laz Diaz\")) |&gt; \n  tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"CB Bucknor\")) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"Ron Kulpa\")) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"Mark Carlson\"))\n\n\n\n\n\n\n  \n    \n      A League of Their Own\n    \n    \n      Four of the 10 most inaccurate umpires in MLB fell short of the average total of correct calls in 2023 for umpires who spent over 20 games behind the plate.\n    \n    \n      Umpire\n      Pitches Called\n      Correct Calls\n      Expected Correct Calls\n      Correct Calls Above Expected\n    \n  \n  \n    Hunter Wendelstedt\n4356\n4034\n4077.2\n-43.2\n    CB Bucknor\n4124\n3815\n3854.1\n-39.1\n    Brian O'Nora\n4800\n4461\n4499.8\n-38.8\n    Doug Eddings\n4458\n4137\n4175.7\n-38.7\n    Laz Diaz\n3064\n2847\n2876.6\n-29.6\n    Rob Drake\n4409\n4113\n4141.1\n-28.1\n    Ron Kulpa\n3846\n3570\n3596.6\n-26.6\n    Dan Iassogna\n4822\n4504\n4525.5\n-21.5\n    Lance Barrett\n4609\n4305\n4321.2\n-16.2\n    Mark Carlson\n4206\n3933\n3947.5\n-14.5\n  \n  \n    \n      By: Jay Mingo |  Source: Umpire Scorecards\n    \n  \n  \n\n\n\n\nFor underperforming umpires, Hunter Wendelstedt led the charge. Nearly 7.4% of his calls were incorrect and he was over 40 calls below the number of correct calls he was expected to make. However, Wendelstedt finished above the average total of correct calls across the league for umpires who’d seen more than 20 games of action. For umpires like CB Bucknor, Laz Diaz, Ron Kulpa and Mark Carlson, this distinguished group failed to deliver an even remotely average season, with Diaz being the furthest from the average total of just over 3,970 correct calls.\n\n\nCode\naccuracy &lt;- umps |&gt; \n  group_by(Umpire) |&gt; \n  select(Umpire, minAcc, maxAcc) |&gt; \n  summarise(\n    Highest= sum(maxAcc),\n    Lowest= sum(minAcc) )|&gt; \n  top_n(-10) |&gt; \n  arrange((Lowest))\n\nggplot() + \n  geom_dumbbell(\n    data=accuracy, \n    aes(y=reorder(Umpire, Highest), x=Highest, xend=Lowest),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  labs(\n    title=\"Rough Day at the Office\", \n    subtitle = \"Several umpires posted accuracy ratings of 96% or better, but when they missed, they missed big.\",\n    caption = \"Source: Umpire Scorecards | By: Jay Mingo\",\n    y= \"Umpire\",\n    x= \"Accuracy Percentage\"\n  ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\n\n\n\n\nUmpires make mistakes. They’re humans. Human error makes the game of baseball, baseball. Whether it’s a third baseman misreading a ball’s bounce, a manager keeping his ace in one half-inning too long, or a fan reaching over the wall and costing their team an out. Regardless of how it manifests, errors are common in baseball and umpires face the most scrutiny for theirs.\nIn 2023, a significant portion of umpires posted highs of over 96% accuracy in a game during the season, with some doing it multiple times. A 4% difference from perfection still means that there were mistakes and wrong calls, but fans can find ways to forgive umpires who make sparse mistakes. However, several umpires finished below 88% in accuracy, meaning over 10% of their calls in a game were wrong.\nWhile many umpires kept their difference between their most accurate and inaccurate performances to a justifiable amount, MLB fan-favorite Angel Hernandez’s roughly 12% swing was one of the worst throughout the season and led to a continuation of years of fan backlash against him in his profession.\n\n\nCode\nset.seed(1234)\n\nincorrectcalls &lt;- umps |&gt; \n  filter(\n    G &gt; 0)\n\ngamechangers &lt;- incorrectcalls |&gt; \n  filter(\n      IC &gt; 273\n  ) |&gt; \n  select(Umpire, IC, avgTRI) |&gt; \n  arrange(-avgTRI)\n\nfiveworst &lt;- gamechangers |&gt; \n  top_n(5)\n\nggplot() +\n  geom_beeswarm(\n    data=incorrectcalls, \n    aes(x=avgTRI, y=IC), color=\"grey\"\n  ) +\n  geom_beeswarm(\n    data=fiveworst, \n    aes(x=avgTRI, y=IC), color=\"blue\"\n  ) +\n  geom_text_repel(\ndata=fiveworst, \n    aes(x=avgTRI, y=IC, label=Umpire)) +\n    geom_hline(yintercept = 227.0851, color=\"darkblue\") +\n  geom_text(aes(x=1.75, y=220, label=\"Average Total of Incorrect Calls in 2023\"), color=\"blue\", size=3.25) + \n  labs(\n    x=\"Average Total Run Impact\",\n    y=\"Incorrect Calls\", \n    title=\"Case for Robo Umps?\", \n    subtitle=\"Seven of MLB's most incorrect umpires affected the final outcomes of contests in 2023 by one or more runs.\", \n    caption=\"Source: Umpire Scorecards | By: Jay Mingo\"\n    ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\") \n\n\n\n\n\nUmpires underperform, some days are better than others - what profession can’t relate to this concept? What person can’t relate to it? That’s a rhetorical question.\nBut when missed calls turn into game-changing runs for the other team or missed out by one’s team, those mistakes and bad days at the office begin to matter.\nOf the initial 10 underperforming umpires, three impacted outcomes by 1.5 or more runs, but one has made an appearance in three categories. Wendelstedt underperformed the most, failed to reach over 96% accuracy and produced some of the most incorrect calls while affecting scores.\nWith several of dozens of umpires working in MLB in 2023, there is ample opportunity for several to claim the title as the worst umpire, but only one man can be the title-bearer.\nThat one man is Hunter Wendelstedt, MLB’s worst umpire in 2023."
  },
  {
    "objectID": "posts/welcome-to-march-sadness/index.html",
    "href": "posts/welcome-to-march-sadness/index.html",
    "title": "Welcome to March Sadness: Using Turnovers Per Possession to Predict the 2024 NCAA Tournament",
    "section": "",
    "text": "One day, the pain will eventually subside. Today, however, isn’t the day.\nAhead of the start of March Madness, I looked at my bracket with excitement. It was the first time that I’d ever used code or anything other than my gut to fill out a bracket of any kind, but this one seemed reliable. Computers know more than I do, right?\nWrong. Kind of?\nMy bracket had some highs, like predicting Oakland or Saint Mary’s to win. Conversely, it had plenty of lows, like predicting Vermont to make it to the National Championship game before barely losing to UConn.\nTerrible, horrible, disgusting, repugnant, and the list of words continues. Thanks thesaurus!\nIt’s March Madness. The unexpected will happen and it will happen often and in the most heartbreaking ways. I knew this already, but how did I end up with UConn and Vermont as the last two standing? Where did I go wrong?\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(tidymodels)\n\n\nWarning: package 'tidymodels' was built under R version 4.3.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.3.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.3.0\n✔ recipes      1.0.9     \n\n\nWarning: package 'dials' was built under R version 4.3.2\n\n\nWarning: package 'infer' was built under R version 4.3.2\n\n\nWarning: package 'modeldata' was built under R version 4.3.2\n\n\nWarning: package 'parsnip' was built under R version 4.3.2\n\n\nWarning: package 'recipes' was built under R version 4.3.2\n\n\nWarning: package 'rsample' was built under R version 4.3.2\n\n\nWarning: package 'tune' was built under R version 4.3.2\n\n\nWarning: package 'workflows' was built under R version 4.3.2\n\n\nWarning: package 'workflowsets' was built under R version 4.3.2\n\n\nWarning: package 'yardstick' was built under R version 4.3.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\n\nCode\nlibrary(hoopR)\n\n\nWarning: package 'hoopR' was built under R version 4.3.2\n\n\nCode\nlibrary(gt)\n\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024)\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; tally() |&gt; filter(n &lt; 10 & season != 2021) |&gt; select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    turnovers_per_possession = total_turnovers/team_possessions, \n    team_turnovers_per_possession = lag(cummean(turnovers_per_possession), n=1),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency, \n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; \n  na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_split) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\n\n# A tibble: 12 × 4\n   variable                             type      role      source  \n   &lt;chr&gt;                                &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   \n 1 game_id                              &lt;chr [2]&gt; ID        original\n 2 game_date                            &lt;chr [1]&gt; ID        original\n 3 team_short_display_name              &lt;chr [3]&gt; ID        original\n 4 opponent_team_short_display_name     &lt;chr [3]&gt; ID        original\n 5 season                               &lt;chr [2]&gt; ID        original\n 6 team_season_offensive_efficiency     &lt;chr [2]&gt; predictor original\n 7 team_season_defensive_efficiency     &lt;chr [2]&gt; predictor original\n 8 opponent_season_offensive_efficiency &lt;chr [2]&gt; predictor original\n 9 opponent_season_defensive_efficiency &lt;chr [2]&gt; predictor original\n10 team_turnovers_per_possession        &lt;chr [2]&gt; predictor original\n11 opponent_turnovers_per_possession    &lt;chr [2]&gt; predictor original\n12 team_result                          &lt;chr [3]&gt; outcome   original\n\n\nCode\nlog_mod &lt;- \n  logistic_reg() |&gt; \n  set_engine(\"glm\") |&gt;\n  set_mode(\"classification\")\n\nrf_mod &lt;- \n  rand_forest() |&gt; \n  set_engine(\"ranger\") |&gt;\n  set_mode(\"classification\")\n\nlog_workflow &lt;- \n  workflow() |&gt; \n  add_model(log_mod) |&gt; \n  add_recipe(game_recipe)\n\nrf_workflow &lt;- \n  workflow() |&gt; \n  add_model(rf_mod) |&gt; \n  add_recipe(game_recipe)\n\nlog_fit &lt;- \n  log_workflow |&gt; \n  fit(data = game_train)\n\nrf_fit &lt;- \n  rf_workflow |&gt; \n  fit(data = game_train)\n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nlogpredict &lt;- log_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(logpredict)\n\nrfpredict &lt;- rf_fit |&gt; predict(new_data = game_train) |&gt;\n  bind_cols(game_train) \n\nrfpredict &lt;- rf_fit |&gt; predict(new_data = game_train, type=\"prob\") |&gt;\n  bind_cols(rfpredict)\n\nmetrics(logpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.678\n2 kap      binary         0.356\n\n\nCode\nmetrics(rfpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.991\n2 kap      binary         0.982\n\n\nCode\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    team_turnovers_per_possession = total_turnovers/team_possessions,\n    cummean(team_turnovers_per_possession),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency, \n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\n\nJoining with `by = join_by(game_id, opponent_team_id)`\n\n\nCode\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; \n  na.omit()\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nlogtestpredict &lt;- log_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(logtestpredict)\n\nmetrics(logtestpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.679\n2 kap      binary         0.358\n\n\nCode\nrftestpredict &lt;- rf_fit |&gt; predict(new_data = game_test) |&gt;\n  bind_cols(game_test)\n\nrftestpredict &lt;- rf_fit |&gt; predict(new_data = game_test, type=\"prob\") |&gt;\n  bind_cols(rftestpredict)\n\nmetrics(rftestpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.665\n2 kap      binary         0.329\n\n\nCode\nlogtestpredict |&gt;\n  conf_mat(team_result, .pred_class)\n\n\n          Truth\nPrediction    W    L\n         W 6860 3208\n         L 3239 6762\n\n\nCode\nrftestpredict |&gt;\n  conf_mat(team_result, .pred_class)\n\n\n          Truth\nPrediction    W    L\n         W 6732 3363\n         L 3367 6607\n\n\nCode\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"S Dakota St\")\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Drake\"\n)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"BYU\"\n)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Grand Canyon\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Arizona\")\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"Colgate\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Kansas\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Texas\")\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Texas\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Creighton\"\n)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Colorado\")\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Vermont\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfourgames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"North Carolina\"\n) |&gt; add_row(\n  team_short_display_name=\"Vermont\",\n  opponent_team_short_display_name=\"McNeese\"\n)\n\nfinalfourgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(finalfourgames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nfinalfourgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(finalfourgames) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nfinalfour &lt;- rf_fit |&gt; predict(new_data = finalfourgames) |&gt;\n  bind_cols(finalfourgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour &lt;- rf_fit |&gt; predict(new_data = finalfourgames, type=\"prob\") |&gt;\n  bind_cols(finalfour) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nchampgame &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Vermont\"\n) \n\nchampgame &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(champgame)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nchampgame &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(champgame) \n\n\nJoining with `by = join_by(opponent_team_short_display_name)`\n\n\nCode\nnatty &lt;- rf_fit |&gt; predict(new_data = champgame) |&gt;\n  bind_cols(champgame) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnatty &lt;- rf_fit |&gt; predict(new_data = champgame, type=\"prob\") |&gt;\n  bind_cols(natty) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nFirstly, I invested a lot in my predictors. Turnovers per possession seemed to be one of the most reliable predictors.In my line of thinking, how often a team turns the ball over in each of their possessions can be a strong indicator of how well they can score when they have the ball and avoid ruining the possession. You cannot score if you don’t have the ball and as has been seen numerous times in college basketball, turnovers are serious momentum killers. Looking back at the season of each team, I accounted for their season totals and also for their previous games to ensure that only games that had been played were factored in. I trusted my predictors and now, I am learning that more could have been done.\n\n\nCode\nsummary(game_recipe)  |&gt; \n  select(variable, role) |&gt; \n  filter(role != \"ID\") |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"The Main Culprit: The Predictors\",\n    subtitle = \"Turnovers per possession and efficiency. It can't go wrong, right?\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      The Main Culprit: The Predictors\n    \n    \n      Turnovers per possession and efficiency. It can't go wrong, right?\n    \n    \n      variable\n      role\n    \n  \n  \n    team_season_offensive_efficiency\npredictor\n    team_season_defensive_efficiency\npredictor\n    opponent_season_offensive_efficiency\npredictor\n    opponent_season_defensive_efficiency\npredictor\n    team_turnovers_per_possession\npredictor\n    opponent_turnovers_per_possession\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Jay Mingo\n    \n  \n  \n\n\n\n\nWith these predictors, I opted for the random forests model. Of my options, it yielded the most effectiveness. The model yielded about a 69% accuracy which was substantial enough for me to select it as my model of choice.\nI did not expect major success but after seeing my West bracket round one results, I began to drink an unreal amount of bracketology Kool-Aid.\nHere are the results:\n\n\nCode\nwestround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"West Regional: Round 1\",\n    subtitle = \"Even with Colgate winning, it was believable.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      West Regional: Round 1\n    \n    \n      Even with Colgate winning, it was believable.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Alabama\nW\n53.7%\nCharleston\n    North Carolina\nW\n71.6%\nWagner\n    Baylor\nW\n51.5%\nColgate\n    Dayton\nW\n55.4%\nNevada\n    Mississippi St\nL\n41.7%\nMichigan St\n    Saint Mary's\nL\n31.2%\nGrand Canyon\n    Arizona\nW\n56.0%\nLong Beach St\n    Clemson\nL\n48.3%\nNew Mexico\n  \n  \n    \n      By: Jay Mingo\n    \n  \n  \n\n\n\n\nOne incorrect pick thanks to my model. Colgate sneaking one away from Baylor, which was believable. Baylor’s season wasn’t much to write home about and an upset of the sort seemed plausible. Though not displayed above, my model originally picked Colgate, Clemson, and Saint Mary’s to win and two of those three were correct. One miracle away from a perfect regional.\n\n\nCode\neastround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"East Regional: Round 1\",\n    subtitle = \"It could have been worse.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      East Regional: Round 1\n    \n    \n      It could have been worse.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Illinois\nL\n46.0%\nMorehead St\n    Washington St\nL\n34.2%\nDrake\n    UConn\nW\n65.7%\nStetson\n    Iowa State\nL\n47.6%\nS Dakota St\n    FAU\nW\n57.5%\nNorthwestern\n    San Diego St\nW\n59.0%\nUAB\n    BYU\nW\n74.7%\nDuquesne\n    Auburn\nW\n53.7%\nYale\n  \n  \n    \n      By: Jay Mingo\n    \n  \n  \n\n\n\n\n25%. 2-for-8. If I were playing baseball, .250 would be decent, maybe even impressive if it were later in the season. However, I am not a MLB player and this was not baseball. Instead, it was the most mind-boggling, puzzling, and gut-wrenching portion of a bracket that I’ve ever seen. Besides the upsets of Auburn, BYU, and FAU, the lunacy of my model to predict South Dakota State, Morehead State, and Drake to win was almost infuriating. To make matters worse, three lost by five points or less, one hung around up until halftime, and the other could’ve won if they’d not blown in to end regulation, but I digress.\nThe best thing to come from the East Regional was predicting UConn all the way to a back-to-back national title, even if it was against the Catamounts of Vermont. Somehow, my worst regional gave me the evventual winner, but the path there was anything but great.\nIf a Final Four ends up with UConn, Alabama, Vermont, and McNeese, perhaps that is something to question. Even with this motley crew of teams that my model predicted, I finished with 910 points and in the top 71.6% of all brackets. There’s a lot I wish that I could go back and do over, things I’d change, but it could’ve been worse.\nI mean, finishing in the top 71.6% of many million brackets. That’s got to count for something, right?\nWho doesn’t love a finish in the top 7.6 million?"
  }
]