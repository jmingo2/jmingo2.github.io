[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "2024 NFL Fantasy: Top 10 Rookies to Draft\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2024\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nUsing linear regression to draft fantasy rookies\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 4, 2024\n\n\nMatt Waite\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to March Sadness: Using Turnovers Per Possession to Predict the 2024 NCAA Tournament\n\n\n\n\n\n\n\nncaa\n\n\nbasketball\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2024\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nA Lot Changed in 2023, but MLB’s Umpires Stayed the Same\n\n\n\n\n\n\n\nmlb\n\n\numpires\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2023\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nNebraska Volleyball’s Recipe for Success: Inside John Cook’s Kitchen\n\n\n\n\n\n\n\nnebraska\n\n\nvolleyball\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\nJay Mingo\n\n\n\n\n\n\n  \n\n\n\n\nHello.\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nJay Mingo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "",
    "text": "Some introductory text here that talks about what we’re doing – making a top 10 list for fantasy rookie wide receivers. Talk about your choices for inputs in the most generic way – looking at where they were drafted, who they were drafted by and what they did in college – and then rub some doubt on it. Can’t know if they’ll be injured, can’t know if they’ll work out or fit in, but given what we do know now, here’s our best guess at what they’ll do etc. etc.\nSo who are the top 10?\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    fant_pt\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=5, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=5, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds\n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  na.omit() |&gt; \n  select(-nfl_team.y)\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    fant_pt\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(fant_pt ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() %&gt;% \n  add_model(linear_mod) %&gt;% \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow %&gt;% \n  fit(data = player_train)\n\n# Start the prediction for this season. The NFL team names are a mess because of choices made by the picks data provider. They just list them by city name, which creates problems in Los Angeles and New York. \n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit %&gt;% \n  predict(new_data = wrmodeling) %&gt;%\n  bind_cols(wrmodeling) \n\n# now that we have predictions, make the table\n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted fantasy points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the top fantasy rookie wide receivers\",\n    subtitle = \"Using draft grades, where they were drafted and who they were drafted by, these receivers could be the most valuable rookie wide receiver for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Matt Waite  |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predicting the top fantasy rookie wide receivers\n    \n    \n      Using draft grades, where they were drafted and who they were drafted by, these receivers could be the most valuable rookie wide receiver for your fantasy team this season. Call the predicted points a safe bet -- an average outcome -- not a ceiling.\n    \n    \n      Player\n      Team\n      Pick\n      Predicted fantasy points\n    \n  \n  \n    Marvin Harrison Jr.\nArizona Cardinals\n4\n78.77378\n    Brian Thomas Jr.\nJacksonville Jaguars\n23\n77.33529\n    Rome Odunze\nChicago Bears\n9\n76.93254\n    Xavier Worthy\nKansas City Chiefs\n28\n76.86446\n    Malik Nabers\nNew York Giants\n6\n76.51324\n    Keon Coleman\nBuffalo Bills\n33\n74.68765\n    Ricky Pearsall\nSan Francisco 49ers\n31\n74.30271\n    Ladd McConkey\nLos Angeles Chargers\n34\n73.10800\n    Xavier Legette\nCarolina Panthers\n32\n67.96691\n    Ja'Lynn Polk\nNew England Patriots\n37\n67.84578\n  \n  \n    \n      By: Matt Waite  |  Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "1. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "1. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-1",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-1",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "2. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "2. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-2",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-2",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-3",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-3",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-4",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-4",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-5",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-5",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-6",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-6",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-7",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-7",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-8",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-8",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-9",
    "href": "posts/index.html#firstname-lastname-nfl-team-name-drafted-x-9",
    "title": "Using linear regression to draft fantasy rookies",
    "section": "3. FirstName LastName, NFL Team Name, Drafted #X",
    "text": "3. FirstName LastName, NFL Team Name, Drafted #X\nTwo to three sentences about the receiver. Could include why you think the model ranked them high. For example, Marvin Harrison Jr. was injured his senior season, so if you don’t have him first and you used college stats to predict, that’s likely why. My table has the 23rd pick of the draft #2. Why? Going to a pass-happy team with a good young quarterback. That’s the kind of thing you’re putting here."
  },
  {
    "objectID": "posts/inside-cooks-kitchen/index.html",
    "href": "posts/inside-cooks-kitchen/index.html",
    "title": "Nebraska Volleyball’s Recipe for Success: Inside John Cook’s Kitchen",
    "section": "",
    "text": "Nebraska has become synonymous with the word “volleyball”. In over 40 years of existence, the Huskers have never come close to producing a losing season and boast five national championships with four of those five coming since 2000. The man leading the Huskers to their first (and second, third and fourth) national title of the 21st century?\nJohn Cook.\nIn 23 years at the helm, Cook helped Nebraska volleyball solidify itself at the forefront of collegiate volleyball and even more recently, helped pack 92,003 red-clad fans into a football stadium on a late August evening to shatter a world record.\nIt took six years for Cook to win another title with the Huskers, which he did in 2006, before not seeing another title until 2015. Since 2015, he collected another title in 2017 and managed two runner-up finishes in 2018 and 2021.\nA two-decade span of dominance, with no foreseeable end in sight, isn’t an easy feat. So one question remains: how is Cook doing it?\nFirst, a look at how Nebraska has fared in national rankings since 2015:\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggbump)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\nlibrary(gt)\n\n\nranks22 &lt;- read_csv(\"ranks22.csv\") |&gt; mutate(Season = 2022)\nranks21 &lt;- read_csv(\"ranks21.csv\") |&gt; mutate(Season = 2021)\nranks20 &lt;- read_csv(\"ranks20.csv\") |&gt; mutate(Season = 2020)\nranks19 &lt;- read_csv(\"ranks19.csv\") |&gt; mutate(Season = 2019)\nranks18 &lt;- read_csv(\"ranks18.csv\") |&gt; mutate(Season = 2018)\nranks17 &lt;- read_csv(\"ranks17.csv\") |&gt; mutate(Season = 2017)\nranks16 &lt;- read_csv(\"ranks16.csv\") |&gt; mutate(Season = 2016)\nranks15 &lt;- read_csv(\"ranks15.csv\") |&gt; mutate(Season = 2015)\n\nranks &lt;- bind_rows(ranks22, ranks21, ranks20, ranks19, ranks18, ranks17, ranks16, ranks15)\n\nchamps &lt;- c(\"Nebraska\", \"Wisconsin\", \"Stanford\", \"Kentucky\", \"Texas\")\n\nrankings &lt;- ranks |&gt; pivot_longer(cols = starts_with(\"Week\"), names_to = \"Week\", values_to = \"Rank\") |&gt; \n group_by(Team, Season) |&gt; \n    select(Team, Season, Week, Rank)  |&gt; \n  filter(Team %in% champs) |&gt; \n  summarise(\n    AvgRank = mean(Rank)\n  )\n\nggplot() + geom_bump(data=rankings, aes(x=Season, y=AvgRank, color=Team)) +\n   geom_point(data=rankings, aes(x=Season, y=AvgRank, color=Team), size = 4) +\n  scale_color_manual(values = c(\"blue\",  \"#E41C38\", \"red\", \"orange\", \"#C5050C\")) +\n  geom_text(data = rankings |&gt; filter(Season == min(Season)), aes(x = Season - .2, y=AvgRank, label = Team), size = 3, hjust = 1) +\n  geom_text(data = rankings |&gt; filter(Season == max(Season)), aes(x = Season + .2, y=AvgRank, label = Team), size = 3, hjust = 0) +\n  labs(\n    title=\"Nebraska is an undoubted Blue Blood\", \n    subtitle=\"In AVCA polls, the Huskers have remained one of the most consistent of the recent national champions \\n averaging a top-10 ranking in every season since the 2015.\",\n    caption= \"Source: American Volleyball Coaches Association | By Jay Mingo\",\n    y= \"Average Rank\", \n    x = \"Season\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank()\n    ) +\n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) +\n  scale_x_continuous(limits=c(2014,2023)) +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nThe Huskers averaged a top-10 ranking since 2015 and have failed to fall outside of that coveted position. Among the other national champions since 2015, Nebraska has maintained consistency in its rankings and as of the 2022 season, sat behind Texas in average ranking. And in case you missed it: the Longhorns hoisted a trophy at the end of that season.\nThe Huskers have been a good team, a perennial powerhouse, an emblem of volleyball royalty since 2015, sure. But averaging a top-10 ranking isn’t easy, so how exactly has Cook done it?\nThe first part: defense. And let the record state: he digs defense.\n\n\nCode\ndigs23 &lt;- read_csv(\"digs23.csv\") |&gt; mutate(Season = 2023)\ndigs22 &lt;- read_csv(\"digs22.csv\") |&gt; mutate(Season = 2022)\ndigs21 &lt;- read_csv(\"digs21.csv\") |&gt; mutate(Season = 2021)\ndigs20 &lt;- read_csv(\"digs20.csv\") |&gt; mutate(Season = 2020)\ndigs19 &lt;- read_csv(\"digs19.csv\") |&gt; mutate(Season = 2019)\ndigs18 &lt;- read_csv(\"digs18.csv\") |&gt; mutate(Season = 2018)\ndigs17 &lt;- read_csv(\"digs17.csv\") |&gt; mutate(Season = 2017)\ndigs16 &lt;- read_csv(\"digs16.csv\") |&gt; mutate(Season = 2016)\ndigs15 &lt;- read_csv(\"digs15 (2).csv\") |&gt;  mutate(Season = 2015)\n\ndigs &lt;- bind_rows(digs23, digs22, digs21, digs20, digs19, digs18, digs17, digs16, digs15)\n\ndigging &lt;- digs |&gt; \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") |&gt; \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(CA)\", \"CA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(OH)\", \"OH\", School, fixed=TRUE)) |&gt; \n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") |&gt; \n  mutate(Conference=gsub(\")\", \"\", Conference)) |&gt; \n  separate(Ht, into=c(\"Feet\", \"Inches\"), sep=\"-\") |&gt;\n  mutate(Feet = as.numeric(Feet), Inches = as.numeric(Inches)) |&gt; \n  mutate(Height = (Feet*12)+Inches) |&gt; \n  mutate(School = str_trim(School))\n\nset.seed(1234)\n\nstars &lt;- digging |&gt; \n  filter(S &gt; 90 & `Per Set` &gt; 3.5)\n\nneb &lt;- stars |&gt; \n  filter(School == \"Nebraska\")\n\n\nggplot() + \n  geom_beeswarm(data=stars, aes(x=Season, y=Digs), color=\"light grey\") +\n  geom_beeswarm(data=neb, aes(x=Season, y=Digs), color=\"red\") +\n  geom_text_repel(data=neb, aes(x=Season, y=Digs, label=Player)) +\n  geom_hline(yintercept = 524.3218, color=\"darkblue\") +\n  geom_text(aes(x=2019, y=545, label=\"Average Digs since 2015\"), color=\"blue\", size=3.25) + \ntheme_minimal() + \n  labs(\n    x=\"Season\",\n    y=\"Total Digs\", \n    title=\"Nebraska is LiberoU\", \n    subtitle=\"In four of the Huskers' last eight seasons, the play of an Olympic and a future Olympic libero has made \\n all the difference in postseason longevity.\", \n    caption=\"Source: stats.ncaa.com | By Jay Mingo\"\n    ) +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nThe Huskers have produced a pair of highly efficient liberos and when those liberos were digging above the average of total digs in the past eight years, their teams were playing in national championships. When those liberos tallied fewer digs than the average, Nebraska didn’t make it beyond the Final Four. The presence, or respective lack thereof, of these liberos is directly reflected in some of the Huskers’ more successful seasons.\nComplementary performances for Nebraska make up the second part: its front row swings for kills. Here’s the top-10 hitting percentages of Huskers since 2015 and heads up: they’re all middle blockers.\n\n\nCode\nhit23 &lt;- read_csv(\"hitting23.csv\") |&gt; mutate(Season = 2023)\nhit22 &lt;- read_csv(\"hitting22.csv\") |&gt; mutate(Season = 2022)\nhit21 &lt;- read_csv(\"hitting21.csv\") |&gt; mutate(Season = 2021)\nhit20 &lt;- read_csv(\"hitting20.csv\") |&gt; mutate(Season = 2020)\nhit19 &lt;- read_csv(\"hitting19.csv\") |&gt; mutate(Season = 2019)\nhit18 &lt;- read_csv(\"hitting18.csv\") |&gt; mutate(Season = 2018)\nhit17 &lt;- read_csv(\"hitting17.csv\") |&gt; mutate(Season = 2017)\nhit16 &lt;- read_csv(\"hitting16.csv\") |&gt; mutate(Season = 2016)\nhit15 &lt;- read_csv(\"hitting15.csv\") |&gt; mutate(Season = 2015) \n\nhitting &lt;- bind_rows(hit23, hit22, hit21, hit20, hit19, hit18, hit17, hit16, hit15)\n\nattackers &lt;- hitting |&gt; \n  separate(Player, into=c(\"Player\", \"School\"), sep=\",\") |&gt; \n  mutate(School = gsub(\"(FL)\", \"FL\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(NY)\", \"NY\", School, fixed=TRUE)) |&gt;\n  mutate(School = gsub(\"(PA)\", \"PA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(CA)\", \"CA\", School, fixed=TRUE)) |&gt; \n  mutate(School = gsub(\"(OH)\", \"OH\", School, fixed=TRUE)) |&gt; \n  separate(School, into=c(\"School\", \"Conference\"), sep=\"\\\\(\") |&gt; \n  mutate(Conference=gsub(\")\", \"\", Conference)) |&gt; \n  mutate(School = str_trim(School))\n\ngbr &lt;- attackers |&gt; \n  filter(School == \"Nebraska\") |&gt; \n  select(Player, Pct., Season, Pos) |&gt; \n  top_n(10, wt=Pct.) |&gt; \n  arrange(desc(Pct.))\n\ngbr |&gt; \n  gt() |&gt;\n  cols_label(\n    Pct. = \"Hitting Percentage\",\n    Pos = \"Position\"\n  ) |&gt; \n  tab_header(\n    title = \"(Front) Row the Boat\", \n    subtitle = \"The Huskers' middles have ushered their teams to postseason success. \\n In 2015 and 2017, Nebraska won a national title. In 2018 and 2021, the Huskers finished runner-up.\")|&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo  |  **Source:** stats.ncaa.org\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"gold\"),\n      cell_text(color = \"black\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2015\")) |&gt;\n   tab_style(\n    style = list(\n      cell_fill(color = \"gold\"),\n      cell_text(color = \"black\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2017\")) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"#CD7F32\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2018\")) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"#CD7F32\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Season == \"2021\"))\n\n\n\n\n\n\n  \n    \n      (Front) Row the Boat\n    \n    \n      The Huskers' middles have ushered their teams to postseason success. \n In 2015 and 2017, Nebraska won a national title. In 2018 and 2021, the Huskers finished runner-up.\n    \n    \n      Player\n      Hitting Percentage\n      Season\n      Position\n    \n  \n  \n    Lauren Stivrins\n0.468\n2020\nMB\n    Lauren Stivrins\n0.421\n2018\nMB\n    Andi Jackson\n0.401\n2023\nMB\n    Kayla Caffey\n0.380\n2020\nMB\n    Lauren Stivrins\n0.374\n2019\nMB\n    Kayla Caffey\n0.363\n2021\nMB\n    Briana Holman\n0.358\n2017\nMB\n    Amber Rolfzen\n0.358\n2015\nMB\n    Briana Holman\n0.350\n2016\nMB\n    Bekka Allick\n0.326\n2022\nMB\n  \n  \n    \n      By: Jay Mingo  |  Source: stats.ncaa.org\n    \n  \n  \n\n\n\n\nIn the four seasons where Nebraska played in the national championship game, middle blockers have been at the forefront of the offensive scheme. Ironically, however, two of the highest performances came in runner-up finishes.\nWhat about now?\nWith several weeks remaining in the regular season, Nebraska is ranked No. 1, libero Lexi Rodriguez is still playing and she’s got a new counterpart in freshman Laney Choboy and that third-ranked middle is a freshman. Not to mention, there is not a single senior on the 2023 team.\nThe ingredients for 2023 are there and the Huskers continue to seek their first perfect season since 2000. Same Cook, different ingredients and the same goals, but only time will tell Cook’s recipe for success."
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "Hello.",
    "section": "",
    "text": "Hi. My name is Jay."
  },
  {
    "objectID": "posts/mlbs-worst-umpire-2023/index.html",
    "href": "posts/mlbs-worst-umpire-2023/index.html",
    "title": "A Lot Changed in 2023, but MLB’s Umpires Stayed the Same",
    "section": "",
    "text": "The 2023 season sought to be a season of numerous changes from the sizes of bases, to pitch clock rules, and playoff format for Major League Baseball and commissioner Rob Manfred.\nThe changes still yield mixed responses from fans of baseball but a common unifying point of contention lies with the men who don the blue and black shirts throughout the season - umpires.\nChanges are arising for penalties, suspensions, firings, robotic umpires and a plethora of other overhauls but one question stands out: who was the worst umpire in the 2023 season and how bad were they?\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(ggalt)\nlibrary(ggtext)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\numps &lt;- read_csv(\"umpires23.csv\")\n\nbad &lt;- umps |&gt; \n  filter(G &gt; 20) |&gt; \n  select(Umpire, PC, CC, xCC, CCAx) |&gt; \n  top_n(-10, wt = CCAx) |&gt; \n  arrange(CCAx)\n\nbad |&gt; \n  gt() |&gt; \n  cols_label(\n    PC = \"Pitches Called\",\n    CC = \"Correct Calls\",\n    xCC = \"Expected Correct Calls\",\n    CCAx = \"Correct Calls Above Expected\") |&gt; \n  tab_header(\n    title = \"A League of Their Own\",\n    subtitle = \"Four of the 10 most inaccurate umpires in MLB fell short of the average total of correct calls in 2023 for umpires who spent over 20 games behind the plate.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo |  **Source:** Umpire Scorecards\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt; \n  tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"Laz Diaz\")) |&gt; \n  tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"CB Bucknor\")) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"Ron Kulpa\")) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"red\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Umpire == \"Mark Carlson\"))\n\n\n\n\n\n\n  \n    \n      A League of Their Own\n    \n    \n      Four of the 10 most inaccurate umpires in MLB fell short of the average total of correct calls in 2023 for umpires who spent over 20 games behind the plate.\n    \n    \n      Umpire\n      Pitches Called\n      Correct Calls\n      Expected Correct Calls\n      Correct Calls Above Expected\n    \n  \n  \n    Hunter Wendelstedt\n4356\n4034\n4077.2\n-43.2\n    CB Bucknor\n4124\n3815\n3854.1\n-39.1\n    Brian O'Nora\n4800\n4461\n4499.8\n-38.8\n    Doug Eddings\n4458\n4137\n4175.7\n-38.7\n    Laz Diaz\n3064\n2847\n2876.6\n-29.6\n    Rob Drake\n4409\n4113\n4141.1\n-28.1\n    Ron Kulpa\n3846\n3570\n3596.6\n-26.6\n    Dan Iassogna\n4822\n4504\n4525.5\n-21.5\n    Lance Barrett\n4609\n4305\n4321.2\n-16.2\n    Mark Carlson\n4206\n3933\n3947.5\n-14.5\n  \n  \n    \n      By: Jay Mingo |  Source: Umpire Scorecards\n    \n  \n  \n\n\n\n\nFor underperforming umpires, Hunter Wendelstedt led the charge. Nearly 7.4% of his calls were incorrect and he was over 40 calls below the number of correct calls he was expected to make. However, Wendelstedt finished above the average total of correct calls across the league for umpires who’d seen more than 20 games of action. For umpires like CB Bucknor, Laz Diaz, Ron Kulpa and Mark Carlson, this distinguished group failed to deliver an even remotely average season, with Diaz being the furthest from the average total of just over 3,970 correct calls.\n\n\nCode\naccuracy &lt;- umps |&gt; \n  group_by(Umpire) |&gt; \n  select(Umpire, minAcc, maxAcc) |&gt; \n  summarise(\n    Highest= sum(maxAcc),\n    Lowest= sum(minAcc) )|&gt; \n  top_n(-10) |&gt; \n  arrange((Lowest))\n\nggplot() + \n  geom_dumbbell(\n    data=accuracy, \n    aes(y=reorder(Umpire, Highest), x=Highest, xend=Lowest),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  labs(\n    title=\"Rough Day at the Office\", \n    subtitle = \"Several umpires posted accuracy ratings of 96% or better, but when they missed, they missed big.\",\n    caption = \"Source: Umpire Scorecards | By: Jay Mingo\",\n    y= \"Umpire\",\n    x= \"Accuracy Percentage\"\n  ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\n\n\n\n\nUmpires make mistakes. They’re humans. Human error makes the game of baseball, baseball. Whether it’s a third baseman misreading a ball’s bounce, a manager keeping his ace in one half-inning too long, or a fan reaching over the wall and costing their team an out. Regardless of how it manifests, errors are common in baseball and umpires face the most scrutiny for theirs.\nIn 2023, a significant portion of umpires posted highs of over 96% accuracy in a game during the season, with some doing it multiple times. A 4% difference from perfection still means that there were mistakes and wrong calls, but fans can find ways to forgive umpires who make sparse mistakes. However, several umpires finished below 88% in accuracy, meaning over 10% of their calls in a game were wrong.\nWhile many umpires kept their difference between their most accurate and inaccurate performances to a justifiable amount, MLB fan-favorite Angel Hernandez’s roughly 12% swing was one of the worst throughout the season and led to a continuation of years of fan backlash against him in his profession.\n\n\nCode\nset.seed(1234)\n\nincorrectcalls &lt;- umps |&gt; \n  filter(\n    G &gt; 0)\n\ngamechangers &lt;- incorrectcalls |&gt; \n  filter(\n      IC &gt; 273\n  ) |&gt; \n  select(Umpire, IC, avgTRI) |&gt; \n  arrange(-avgTRI)\n\nfiveworst &lt;- gamechangers |&gt; \n  top_n(5)\n\nggplot() +\n  geom_beeswarm(\n    data=incorrectcalls, \n    aes(x=avgTRI, y=IC), color=\"grey\"\n  ) +\n  geom_beeswarm(\n    data=fiveworst, \n    aes(x=avgTRI, y=IC), color=\"blue\"\n  ) +\n  geom_text_repel(\ndata=fiveworst, \n    aes(x=avgTRI, y=IC, label=Umpire)) +\n    geom_hline(yintercept = 227.0851, color=\"darkblue\") +\n  geom_text(aes(x=1.75, y=220, label=\"Average Total of Incorrect Calls in 2023\"), color=\"blue\", size=3.25) + \n  labs(\n    x=\"Average Total Run Impact\",\n    y=\"Incorrect Calls\", \n    title=\"Case for Robo Umps?\", \n    subtitle=\"Seven of MLB's most incorrect umpires affected the final outcomes of contests in 2023 by one or more runs.\", \n    caption=\"Source: Umpire Scorecards | By: Jay Mingo\"\n    ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    axis.title = element_text(size = 8), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\") \n\n\n\n\n\nUmpires underperform, some days are better than others - what profession can’t relate to this concept? What person can’t relate to it? That’s a rhetorical question.\nBut when missed calls turn into game-changing runs for the other team or missed out by one’s team, those mistakes and bad days at the office begin to matter.\nOf the initial 10 underperforming umpires, three impacted outcomes by 1.5 or more runs, but one has made an appearance in three categories. Wendelstedt underperformed the most, failed to reach over 96% accuracy and produced some of the most incorrect calls while affecting scores.\nWith several of dozens of umpires working in MLB in 2023, there is ample opportunity for several to claim the title as the worst umpire, but only one man can be the title-bearer.\nThat one man is Hunter Wendelstedt, MLB’s worst umpire in 2023."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html",
    "href": "posts/predicting-fantasy-receivers/index.html",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "",
    "text": "Using receiving yards, touchdowns, quarterback play, and more, I established predictions for which fantasy wide receivers to draft in fantasy football this upcoming season. The factors together predicted fantasy points and ranked the top 10 prospects.\nHere the top 10.\nCode\nlibrary(tidyverse)\nlibrary(cfbfastR)\nlibrary(tidymodels)\nlibrary(zoo)\nlibrary(bonsai)\nlibrary(gt)\n\nset.seed(1234)\n\nwrpicks &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrpicks1423.csv\") |&gt; \n  mutate(college_year = year - 1)\n\nwrstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/receiving1323.csv\")\nwrusage &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/usage1323.csv\")\nwrfantasy &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/fantasystats1423.csv\") |&gt; \n  mutate(nfl_team = case_when(\n    tm == \"ARI\" ~ \"Arizona Cardinals\",\n    tm == \"ATL\" ~ \"Atlanta Falcons\",\n    tm == \"BAL\" ~ \"Baltimore Ravens\",\n    tm == \"BUF\" ~ \"Buffalo Bills\",\n    tm == \"CAR\" ~ \"Carolina Panthers\",\n    tm == \"CHI\" ~ \"Chicago Bears\",\n    tm == \"CIN\" ~ \"Cincinnati Bengals\",\n    tm == \"CLE\" ~ \"Cleveland Browns\",\n    tm == \"DAL\" ~ \"Dallas Cowboys\",\n    tm == \"DEN\" ~ \"Denver Broncos\",\n    tm == \"DET\" ~ \"Detroit Lions\",\n    tm == \"GNB\" ~ \"Green Bay Packers\",\n    tm == \"HOU\" ~ \"Houston Texans\",\n    tm == \"IND\" ~ \"Indianapolis Colts\",\n    tm == \"JAX\" ~ \"Jacksonville Jaguars\",\n    tm == \"KAN\" ~ \"Kansas City Chiefs\",\n    tm == \"LAC\" ~ \"Los Angeles Chargers\", \n    tm == \"LAR\" ~ \"Los Angeles Rams\", \n    tm == \"LVR\" ~ \"Las Vegas Raiders\",\n    tm == \"MIA\" ~ \"Miami Dolphins\",  \n    tm == \"MIN\" ~ \"Minnesota Vikings\",\n    tm == \"NOR\" ~ \"New Orleans Saints\",\n    tm == \"NWE\" ~ \"New England Patriots\",\n    tm == \"NYG\" ~ \"New York Giants\",\n    tm == \"NYJ\" ~ \"New York Jets\",\n    tm == \"OAK\" ~ \"Las Vegas Raiders\",\n    tm == \"PHI\" ~ \"Philadelphia Eagles\",\n    tm == \"PIT\" ~ \"Pittsburgh Steelers\",\n    tm == \"SDG\" ~ \"Los Angeles Chargers\",\n    tm == \"SEA\" ~ \"Seattle Seahawks\",\n    tm == \"SFO\" ~ \"San Francisco 49ers\",\n    tm == \"STL\" ~ \"Los Angeles Rams\",\n    tm == \"TAM\" ~ \"Tampa Bay Buccaneers\",\n    tm == \"TEN\" ~ \"Tennessee Titans\",\n    tm == \"WAS\" ~ \"Washington Commanders\",\n  ))\n\nnflstats &lt;- read_csv(\"https://mattwaite.github.io/sportsdatafiles/nfl_passing_offense0023.csv\") |&gt; filter(season &gt;= 2009) |&gt; \n  mutate(\n    nfl_team = case_when(\n      tm == \"Oakland Raiders\" ~ \"Las Vegas Raiders\",\n      tm == \"San Diego Chargers\" ~ \"Los Angeles Chargers\",\n      tm == \"St. Louis Rams\" ~ \"Los Angeles Rams\",\n      tm == \"Washington Football Team\" ~ \"Washington Commanders\",\n      tm == \"Washington Redskins\" ~ \"Washington Commanders\",\n      TRUE ~ tm\n      ))\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_td,\n    receiving_ypr\n  )\n\nwrfantasyselected &lt;- wrfantasy |&gt; \n  filter(fant_pos == \"WR\") |&gt; \n  select(\n    season,\n    player, \n    nfl_team,\n    fant_pos,\n    fant_pt\n  )\n\nnflpassingselected &lt;- nflstats |&gt; \n  mutate(\n    rolling_mean_passing_yards = rollmean(yds, k=3, align = \"right\", fill=NA),\n    rolling_mean_passing_tds = rollmean(td, k=3, align = \"right\", fill=NA),\n    rolling_mean_passing_ints = rollmean(int, k=3, align = \"right\", fill=NA),\n    rolling_mean_passing_att = rollmean(att, k=3, align = \"right\", fill=NA),\n  ) |&gt; \n  filter(season &gt;= 2014) |&gt; \n  select(\n    season,\n    nfl_team,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    rolling_mean_passing_ints,\n    rolling_mean_passing_att\n  )\n  \nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrpicksandfantasy &lt;- wrfantasyselected |&gt; \n  inner_join(wrpicksstats, by=c(\"player\" = \"name\", \"season\"=\"year\")) \n\nwrmodeling &lt;- wrpicksandfantasy |&gt;\n  left_join(nflpassingselected, by=c(\"season\"=\"season\", \"nfl_team.x\"=\"nfl_team\")) |&gt; \n  na.omit() |&gt; \n  select(-nfl_team.y)\n\nwrmodelingselected &lt;- wrmodeling |&gt; \n  select(\n    season,\n    player,\n    nfl_team.x,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    rolling_mean_passing_ints,\n    rolling_mean_passing_att,\n    receiving_td,\n    receiving_yds,\n    receiving_ypr,\n    fant_pt\n  ) |&gt; \n  rename(\n    nfl_team = nfl_team.x\n  )\n\nplayer_split &lt;- initial_split(wrmodelingselected, prop = .8)\n\nplayer_train &lt;- training(player_split)\nplayer_test &lt;- testing(player_split)\n\nplayer_recipe &lt;- \n  recipe(fant_pt ~ ., data = player_train) |&gt; \n  update_role(player, season, nfl_team, new_role = \"ID\")\n\nlinear_mod &lt;- \n  linear_reg() |&gt; \n  set_engine(\"lm\") |&gt;\n  set_mode(\"regression\")\n\nlinear_workflow &lt;- \n  workflow() %&gt;% \n  add_model(linear_mod) %&gt;% \n  add_recipe(player_recipe)\n\nlinear_fit &lt;- \n  linear_workflow %&gt;% \n  fit(data = player_train)\n\n# Start the prediction for this season. The NFL team names are a mess because of choices made by the picks data provider. They just list them by city name, which creates problems in Los Angeles and New York. \n\nwrpicks &lt;- cfbd_draft_picks(year = 2024) |&gt; \n  filter(position == \"Wide Receiver\") |&gt; \n  mutate(college_year = year - 1) |&gt; \n  mutate(college_athlete_id = as.character(college_athlete_id)) |&gt; \n  mutate(nfl_team = case_when(\n    nfl_team == \"Arizona\" ~ \"Arizona Cardinals\",\n    nfl_team == \"Atlanta\" ~ \"Atlanta Falcons\",\n    nfl_team == \"Baltimore\" ~ \"Baltimore Ravens\",\n    nfl_team == \"Buffalo\" ~ \"Buffalo Bills\",\n    nfl_team == \"Carolina\" ~ \"Carolina Panthers\",\n    nfl_team == \"Chicago\" ~ \"Chicago Bears\",\n    nfl_team == \"Cincinnati\" ~ \"Cincinnati Bengals\",\n    nfl_team == \"Cleveland\" ~ \"Cleveland Browns\",\n    nfl_team == \"Dallas\" ~ \"Dallas Cowboys\",\n    nfl_team == \"Denver\" ~ \"Denver Broncos\",\n    nfl_team == \"Detroit\" ~ \"Detroit Lions\",\n    nfl_team == \"Green Bay\" ~ \"Green Bay Packers\",\n    nfl_team == \"Houston\" ~ \"Houston Texans\",\n    nfl_team == \"Indianapolis\" ~ \"Indianapolis Colts\",\n    nfl_team == \"Jacksonville\" ~ \"Jacksonville Jaguars\",\n    nfl_team == \"Kansas City\" ~ \"Kansas City Chiefs\",\n    name == \"Ladd McConkey\" ~ \"Los Angeles Chargers\", \n    name == \"Brenden Rice\" ~ \"Los Angeles Chargers\", \n    name == \"Cornelius Johnson\" ~ \"Los Angeles Chargers\",\n    name == \"Jordan Whittington\" ~ \"Los Angeles Rams\", \n    nfl_team == \"Las Vegas\" ~ \"Las Vegas Raiders\",\n    nfl_team == \"Miami\" ~ \"Miami Dolphins\",  \n    nfl_team == \"Minnesota\" ~ \"Minnesota Vikings\",\n    nfl_team == \"New Orleans\" ~ \"New Orleans Saints\",\n    nfl_team == \"New England\" ~ \"New England Patriots\",\n    name == \"Malik Nabers\" ~ \"New York Giants\",\n    nfl_team == \"New York\" ~ \"New York Jets\",\n    nfl_team == \"Philadelphia\" ~ \"Philadelphia Eagles\",\n    nfl_team == \"Pittsburgh\" ~ \"Pittsburgh Steelers\",\n    nfl_team == \"Seattle\" ~ \"Seattle Seahawks\",\n    nfl_team == \"San Francisco\" ~ \"San Francisco 49ers\",\n    nfl_team == \"St Louis\" ~ \"Los Angeles Rams\",\n    nfl_team == \"Tampa Bay\" ~ \"Tampa Bay Buccaneers\",\n    nfl_team == \"Tennessee\" ~ \"Tennessee Titans\",\n    nfl_team == \"Washington\" ~ \"Washington Commanders\",\n  ))\n\nwrstats &lt;- cfbd_stats_season_player(2023, category = \"receiving\") |&gt; \n  mutate(season = 2023)\n\nwrpicksselected &lt;- wrpicks |&gt; \n  select(\n    college_athlete_id,\n    nfl_athlete_id,\n    college_id,\n    name,\n    college_team, \n    college_conference,\n    nfl_team, \n    year,\n    college_year,\n    overall,\n    pre_draft_grade\n  )\n\nwrstatsselected &lt;- wrstats |&gt; \n  select(\n    athlete_id,\n    season,\n    receiving_yds,\n    receiving_td,\n    receiving_ypr\n  )\n\nwrpicksstats &lt;- wrpicksselected |&gt; \n  inner_join(wrstatsselected, by=c(\"college_athlete_id\"=\"athlete_id\", \"college_year\" = \"season\"))\n\nwrmodeling &lt;- wrpicksstats |&gt;\n  left_join(nflpassingselected, by=c(\"college_year\"=\"season\", \"nfl_team\"=\"nfl_team\")) |&gt;\n  select(\n    year,\n    name,\n    nfl_team,\n    overall,\n    rolling_mean_passing_yards,\n    rolling_mean_passing_tds,\n    rolling_mean_passing_ints,\n    rolling_mean_passing_att,\n    receiving_td,\n    receiving_yds,\n    receiving_ypr\n  ) |&gt; \n  rename(\n    player = name,\n    season = year\n  )\n\nlinearpredict &lt;- \n  linear_fit %&gt;% \n  predict(new_data = wrmodeling) %&gt;%\n  bind_cols(wrmodeling) \n\n# now that we have predictions, make the table\n\nlinearpredict |&gt; \n  select(player, nfl_team, overall, .pred) |&gt; \n  top_n(10, wt=.pred) |&gt; \n  arrange(desc(.pred)) |&gt; \n  gt() |&gt; \n  cols_label(\n    player = \"Player\",\n    nfl_team = \"Team\",\n    overall = \"Pick\",\n    .pred = \"Predicted fantasy points\"\n  )  |&gt;\n  tab_header(\n    title = \"Predicting the top fantasy rookie wide receivers\",\n    subtitle = \"Using a variety of factors, these 10 receivers could be the answer to a successful fantasy year.\"\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo  |  **Source:** CFDB, Pro-Football Reference\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predicting the top fantasy rookie wide receivers\n    \n    \n      Using a variety of factors, these 10 receivers could be the answer to a successful fantasy year.\n    \n    \n      Player\n      Team\n      Pick\n      Predicted fantasy points\n    \n  \n  \n    Ricky Pearsall\nSan Francisco 49ers\n31\n83.06029\n    Xavier Worthy\nKansas City Chiefs\n28\n82.69175\n    Rome Odunze\nChicago Bears\n9\n74.81899\n    Marvin Harrison Jr.\nArizona Cardinals\n4\n74.13200\n    Keon Coleman\nBuffalo Bills\n33\n73.39601\n    Brian Thomas Jr.\nJacksonville Jaguars\n23\n72.81606\n    Malik Nabers\nNew York Giants\n6\n72.04801\n    Ladd McConkey\nLos Angeles Chargers\n34\n68.10465\n    Ja'Lynn Polk\nNew England Patriots\n37\n61.75812\n    Xavier Legette\nCarolina Panthers\n32\n59.24070\n  \n  \n    \n      By: Jay Mingo  |  Source: CFDB, Pro-Football Reference"
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "href": "posts/predicting-fantasy-receivers/index.html#ricky-pearsall-san-francisco-49ers-drafted-31",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "1. Ricky Pearsall, San Francisco 49ers, Drafted #31",
    "text": "1. Ricky Pearsall, San Francisco 49ers, Drafted #31\nPearsall spent three years at Arizona State before transferring to Florida and having back-to-back 600+ yard seasons. On a team with proven quarterback like Brock Purdy and an offensive guru as head coach like Kyle Shanahan, Pearsall can be expected to be a productive offensive weapon and a good pick."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "href": "posts/predicting-fantasy-receivers/index.html#xavier-worthy-kansas-city-chiefs-drafted-28",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "2. Xavier Worthy, Kansas City Chiefs, Drafted #28",
    "text": "2. Xavier Worthy, Kansas City Chiefs, Drafted #28\nYet another speedy wideout for the Chiefs. The Longhorn played a critical role in Texas’ deep run into the postseason and is now poised to be the prime target for Patrick Mahomes. With this new opportunity and the greatest modern quarterback, Worthy will be worthy of being picked up in fantasy drafts."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "href": "posts/predicting-fantasy-receivers/index.html#rome-odunze-chicago-bears-drafted-9",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "3. Rome Odunze, Chicago Bears, Drafted #9",
    "text": "3. Rome Odunze, Chicago Bears, Drafted #9\nRome Odunze did a lot to help his quarterback Michael Penix and the Washington Huskies make it all the way to the national championship. However, the Bears’ likely new quarterback Caleb Williams has yet to take a snap in the NFL and his chance of success is uncertain. Odunze might be a risky pick, but if all works out in the Windy City, he could be a reliable playmaker."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "href": "posts/predicting-fantasy-receivers/index.html#marvin-harrison-jr.-arizona-cardinals-drafted-4",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "4. Marvin Harrison Jr., Arizona Cardinals, Drafted #4",
    "text": "4. Marvin Harrison Jr., Arizona Cardinals, Drafted #4\nHarrison Jr. was undoubtedly the best wide receiver in college football for the duration of his career, and a big what if surrounds his senior season injury. Now, with a new quarterback, he has a chance to echo his father’s legacy and etch his name in NFL history books. Maserati Marv is a potentially risk choice for fantasy, but could have a breakout rookie year."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "href": "posts/predicting-fantasy-receivers/index.html#keon-coleman-buffalo-bills-drafted-33",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "5. Keon Coleman, Buffalo Bills, Drafted #33",
    "text": "5. Keon Coleman, Buffalo Bills, Drafted #33\nNo Stefon Diggs? No problem. Josh Allen as quarterback leads to a lot of promise for Coleman. Quarterback play will be significant in the upcoming season and with one of the best passers in the game at the helm, Coleman is a hidden gem worth picking up."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "href": "posts/predicting-fantasy-receivers/index.html#brian-thomas-jr.-jacksonville-jaguars-drafted-23",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "6. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23",
    "text": "6. Brian Thomas Jr., Jacksonville Jaguars, Drafted #23\nAn LSU grad, Thomas Jr. led the FBS with 17 touchdowns. Doug Pederson is another offensive genius in the NFL and leading the Jaguars, he can make the most of Thomas Jr. and lead the rookie to underrated season."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "href": "posts/predicting-fantasy-receivers/index.html#malik-nabers-new-york-giants-drafted-6",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "7. Malik Nabers, New York Giants, Drafted #6",
    "text": "7. Malik Nabers, New York Giants, Drafted #6\nLike Thomas Jr., Nabers is an LSU grad and was a crucial part of their explosive offense. However, there are numerous question marks surrounding the quarterback situation for the Giants. While Nabers was reliable in college, taking him in the NFL may be a risky move."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "href": "posts/predicting-fantasy-receivers/index.html#ladd-mcconkey-los-angeles-chargers-drafted-34",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "8. Ladd McConkey, Los Angeles Chargers, Drafted #34",
    "text": "8. Ladd McConkey, Los Angeles Chargers, Drafted #34\nThe Mad Ladd was underrepresented due to his time at Georgia, but the Bulldog made the most of his playing time. Now with a new head coach and quarterback Justin Herbert, McConkey can move up to top target status during his stay in Los Angeles."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#jalynn-polk-new-england-patriots-drafted-32",
    "href": "posts/predicting-fantasy-receivers/index.html#jalynn-polk-new-england-patriots-drafted-32",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "9. Ja’Lynn Polk, New England Patriots, Drafted #32",
    "text": "9. Ja’Lynn Polk, New England Patriots, Drafted #32\nAnother Husky, the wideout has a chance to make a name for himself in the NFL. New quarterback Drake Maye and Polk can connect for a strong start to their NFL careers. Polk may not be a first pick but a late round steal, he could be."
  },
  {
    "objectID": "posts/predicting-fantasy-receivers/index.html#xavier-legette-carolina-panthers-drafted-37",
    "href": "posts/predicting-fantasy-receivers/index.html#xavier-legette-carolina-panthers-drafted-37",
    "title": "2024 NFL Fantasy: Top 10 Rookies to Draft",
    "section": "10. Xavier Legette, Carolina Panthers, Drafted #37",
    "text": "10. Xavier Legette, Carolina Panthers, Drafted #37\nLegette has more than just a cool accent. The Gamecock was a productive part of South Carolina’s offense and has a chance to do so for the Panthers. However, the Panthers are a dumpster fire and taking Legette would be a risk likely not worth taking."
  },
  {
    "objectID": "posts/welcome-to-march-sadness/index.html",
    "href": "posts/welcome-to-march-sadness/index.html",
    "title": "Welcome to March Sadness: Using Turnovers Per Possession to Predict the 2024 NCAA Tournament",
    "section": "",
    "text": "One day, the pain will eventually subside. Today, however, isn’t the day.\nAhead of the start of March Madness, I looked at my bracket with excitement. It was the first time that I’d ever used code or anything other than my gut to fill out a bracket of any kind, but this one seemed reliable. Computers know more than I do, right?\nWrong. Kind of?\nMy bracket had some highs, like predicting Oakland or Saint Mary’s to win. Conversely, it had plenty of lows, like predicting Vermont to make it to the National Championship game before barely losing to UConn.\nTerrible, horrible, disgusting, repugnant, and the list of words continues. Thanks thesaurus!\nIt’s March Madness. The unexpected will happen and it will happen often and in the most heartbreaking ways. I knew this already, but how did I end up with UConn and Vermont as the last two standing? Where did I go wrong?\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(gt)\n\nset.seed(1234)\n\ngames &lt;- load_mbb_team_box(seasons = 2015:2024)\n\nnond1 &lt;- games |&gt; group_by(team_id, season) |&gt; tally() |&gt; filter(n &lt; 10 & season != 2021) |&gt; select(team_id)\nnond1 &lt;- pull(nond1)\n\ndf &lt;- games |&gt; filter(!team_id %in% nond1 & !opponent_team_id %in% nond1) |&gt; filter(game_date &lt; as.Date(\"2024-03-18\"))\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = lag(cummean(team_offensive_efficiency), n=1),\n    team_season_defensive_efficiency = lag(cummean(team_defensive_efficiency), n=1),  \n    turnovers_per_possession = total_turnovers/team_possessions, \n    team_turnovers_per_possession = lag(cummean(turnovers_per_possession), n=1),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency, \n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; \n  na.omit()\n\ngame_split &lt;- initial_split(modelgames, prop = .8)\ngame_train &lt;- training(game_split)\ngame_test &lt;- testing(game_split)\n\ngame_recipe &lt;- \n  recipe(team_result ~ ., data = game_split) |&gt; \n  update_role(game_id, game_date, team_short_display_name, opponent_team_short_display_name, season, new_role = \"ID\") |&gt;\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\nlog_mod &lt;- \n  logistic_reg() |&gt; \n  set_engine(\"glm\") |&gt;\n  set_mode(\"classification\")\n\nrf_mod &lt;- \n  rand_forest() |&gt; \n  set_engine(\"ranger\") |&gt;\n  set_mode(\"classification\")\n\nlog_workflow &lt;- \n  workflow() |&gt; \n  add_model(log_mod) |&gt; \n  add_recipe(game_recipe)\n\nrf_workflow &lt;- \n  workflow() |&gt; \n  add_model(rf_mod) |&gt; \n  add_recipe(game_recipe)\n\nlog_fit &lt;- \n  log_workflow |&gt; \n  fit(data = game_train)\n\nrf_fit &lt;- \n  rf_workflow |&gt; \n  fit(data = game_train)\n\nteamside &lt;- df |&gt; \n  group_by(team_short_display_name, season) |&gt; \n  arrange(game_date) |&gt; \n  mutate(\n    team_possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_points_per_possession = team_score/team_possessions,\n    team_defensive_points_per_possession = opponent_team_score/team_possessions,\n    team_offensive_efficiency = team_points_per_possession * 100,\n    team_defensive_efficiency = team_defensive_points_per_possession * 100,\n    team_season_offensive_efficiency = cummean(team_offensive_efficiency),\n    team_season_defensive_efficiency = cummean(team_defensive_efficiency),  \n    team_turnovers_per_possession = total_turnovers/team_possessions,\n    cummean(team_turnovers_per_possession),\n    score_margin = team_score - opponent_team_score,\n    absolute_score_margin = abs(score_margin)\n  ) |&gt; \n  filter(absolute_score_margin &lt;= 40) |&gt; \n  ungroup()\n\nopponentside &lt;- teamside |&gt; \n  select(-opponent_team_id) |&gt; \n  rename(\n    opponent_team_id = team_id,\n    opponent_season_offensive_efficiency = team_season_offensive_efficiency,\n    opponent_season_defensive_efficiency = team_season_defensive_efficiency,\n    opponent_turnovers_per_possession = team_turnovers_per_possession\n  ) |&gt; \n  select(\n    game_id,\n    opponent_team_id,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency, \n    opponent_turnovers_per_possession\n  )\n\nbothsides &lt;- teamside |&gt; inner_join(opponentside)\n\nbothsides &lt;- bothsides |&gt; mutate(\n  team_result = as.factor(case_when(\n    team_score &gt; opponent_team_score ~ \"W\",\n    opponent_team_score &gt; team_score ~ \"L\"\n)))\n\nbothsides$team_result &lt;- relevel(bothsides$team_result, ref=\"W\")\n\nmodelgames &lt;- bothsides |&gt; \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_team_short_display_name, \n    season, \n    team_season_offensive_efficiency,\n    team_season_defensive_efficiency,\n    opponent_season_offensive_efficiency,\n    opponent_season_defensive_efficiency,\n    team_turnovers_per_possession,\n    opponent_turnovers_per_possession,\n    team_result\n    ) |&gt; \n  na.omit()\n\neastround1games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Stetson\"\n) |&gt; add_row(\n  team_short_display_name=\"FAU\",\n  opponent_team_short_display_name=\"Northwestern\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"UAB\"\n) |&gt; add_row(\n  team_short_display_name=\"Auburn\",\n  opponent_team_short_display_name=\"Yale\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Duquesne\"\n) |&gt; add_row(\n  team_short_display_name=\"Illinois\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Washington St\",\n  opponent_team_short_display_name=\"Drake\"\n) |&gt; add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_team_short_display_name=\"S Dakota St\"\n)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround1games)\n\neastround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround1games) \n\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games) |&gt;\n  bind_cols(eastround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround1 &lt;- rf_fit |&gt; predict(new_data = eastround1games, type=\"prob\") |&gt;\n  bind_cols(eastround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"FAU\"\n) |&gt; add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Morehead St\"\n) |&gt; add_row(\n  team_short_display_name=\"Drake\",\n  opponent_team_short_display_name=\"S Dakota St\")\n\neastround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround2games)\n\neastround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround2games) \n\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games) |&gt;\n  bind_cols(eastround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround2 &lt;- rf_fit |&gt; predict(new_data = eastround2games, type=\"prob\") |&gt;\n  bind_cols(eastround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Auburn\"\n) |&gt; add_row(\n  team_short_display_name=\"BYU\",\n  opponent_team_short_display_name=\"Drake\"\n)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround3games)\n\neastround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround3games) \n\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games) |&gt;\n  bind_cols(eastround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround3 &lt;- rf_fit |&gt; predict(new_data = eastround3games, type=\"prob\") |&gt;\n  bind_cols(eastround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4games &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"BYU\"\n)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(eastround4games)\n\neastround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(eastround4games) \n\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games) |&gt;\n  bind_cols(eastround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\neastround4 &lt;- rf_fit |&gt; predict(new_data = eastround4games, type=\"prob\") |&gt;\n  bind_cols(eastround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Wagner\"\n) |&gt; add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n) |&gt; add_row(\n  team_short_display_name=\"Alabama\",\n  opponent_team_short_display_name=\"Charleston\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"New Mexico\"\n) |&gt; add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Nevada\"\n) |&gt; add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_team_short_display_name=\"Long Beach St\"\n)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround1games)\n\nwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround1games) \n\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games) |&gt;\n  bind_cols(westround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround1 &lt;- rf_fit |&gt; predict(new_data = westround1games, type=\"prob\") |&gt;\n  bind_cols(westround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Michigan St\"\n) |&gt; add_row(\n  team_short_display_name=\"Grand Canyon\",\n  opponent_team_short_display_name=\"Alabama\"\n) |&gt; add_row(\n  team_short_display_name=\"Clemson\",\n  opponent_team_short_display_name=\"Colgate\"\n) |&gt; add_row(\n  team_short_display_name=\"Dayton\",\n  opponent_team_short_display_name=\"Arizona\")\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround2games)\n\nwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround2games) \n\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games) |&gt;\n  bind_cols(westround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround2 &lt;- rf_fit |&gt; predict(new_data = westround2games, type=\"prob\") |&gt;\n  bind_cols(westround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3games &lt;- tibble(\n  team_short_display_name=\"Colgate\",\n  opponent_team_short_display_name=\"Arizona\"\n) |&gt; add_row(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Grand Canyon\"\n)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround3games)\n\nwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround3games) \n\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games) |&gt;\n  bind_cols(westround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround3 &lt;- rf_fit |&gt; predict(new_data = westround3games, type=\"prob\") |&gt;\n  bind_cols(westround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4games &lt;- tibble(\n  team_short_display_name=\"North Carolina\",\n  opponent_team_short_display_name=\"Arizona\"\n)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(westround4games)\n\nwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(westround4games) \n\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games) |&gt;\n  bind_cols(westround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nwestround4 &lt;- rf_fit |&gt; predict(new_data = westround4games, type=\"prob\") |&gt;\n  bind_cols(westround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Grambling\"\n) |&gt; add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_team_short_display_name=\"TCU\"\n) |&gt; add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_team_short_display_name=\"McNeese\"\n) |&gt; add_row(\n  team_short_display_name=\"Kansas\",\n  opponent_team_short_display_name=\"Samford\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Oregon\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Akron\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas\",\n  opponent_team_short_display_name=\"Colorado St\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Saint Peter's\"\n)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround1games)\n\nmidwestround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround1games) \n\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games) |&gt;\n  bind_cols(midwestround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround1 &lt;- rf_fit |&gt; predict(new_data = midwestround1games, type=\"prob\") |&gt;\n  bind_cols(midwestround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2games &lt;- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Kansas\"\n) |&gt; add_row(\n  team_short_display_name=\"South Carolina\",\n  opponent_team_short_display_name=\"Creighton\"\n) |&gt; add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_team_short_display_name=\"Texas\")\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround2games)\n\nmidwestround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround2games) \n\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games) |&gt;\n  bind_cols(midwestround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround2 &lt;- rf_fit |&gt; predict(new_data = midwestround2games, type=\"prob\") |&gt;\n  bind_cols(midwestround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3games &lt;- tibble(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Utah State\"\n) |&gt; add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_team_short_display_name=\"Texas\"\n)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround3games)\n\nmidwestround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround3games) \n\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games) |&gt;\n  bind_cols(midwestround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround3 &lt;- rf_fit |&gt; predict(new_data = midwestround3games, type=\"prob\") |&gt;\n  bind_cols(midwestround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4games &lt;- tibble(\n  team_short_display_name=\"McNeese\",\n  opponent_team_short_display_name=\"Creighton\"\n)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(midwestround4games)\n\nmidwestround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(midwestround4games) \n\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games) |&gt;\n  bind_cols(midwestround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nmidwestround4 &lt;- rf_fit |&gt; predict(new_data = midwestround4games, type=\"prob\") |&gt;\n  bind_cols(midwestround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Longwood\"\n) |&gt; add_row(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Texas A&M\"\n) |&gt; add_row(\n  team_short_display_name=\"Wisconsin\",\n  opponent_team_short_display_name=\"James Madison\"\n) |&gt; add_row(\n  team_short_display_name=\"Duke\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"Texas Tech\",\n  opponent_team_short_display_name=\"NC State\"\n) |&gt; add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Florida\",\n  opponent_team_short_display_name=\"Colorado\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Western KY\"\n)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround1games)\n\nsouthround1games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround1games) \n\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games) |&gt;\n  bind_cols(southround1games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround1 &lt;- rf_fit |&gt; predict(new_data = southround1games, type=\"prob\") |&gt;\n  bind_cols(southround1) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2games &lt;- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_team_short_display_name=\"Nebraska\"\n) |&gt; add_row(\n  team_short_display_name=\"James Madison\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Oakland\"\n) |&gt; add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_team_short_display_name=\"Colorado\")\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround2games)\n\nsouthround2games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround2games) \n\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games) |&gt;\n  bind_cols(southround2games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround2 &lt;- rf_fit |&gt; predict(new_data = southround2games, type=\"prob\") |&gt;\n  bind_cols(southround2) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3games &lt;- tibble(\n  team_short_display_name=\"Nebraska\",\n  opponent_team_short_display_name=\"Vermont\"\n) |&gt; add_row(\n  team_short_display_name=\"NC State\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround3games)\n\nsouthround3games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround3games) \n\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games) |&gt;\n  bind_cols(southround3games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround3 &lt;- rf_fit |&gt; predict(new_data = southround3games, type=\"prob\") |&gt;\n  bind_cols(southround3) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4games &lt;- tibble(\n  team_short_display_name=\"Vermont\",\n  opponent_team_short_display_name=\"Colorado\"\n)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(southround4games)\n\nsouthround4games &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(southround4games) \n\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games) |&gt;\n  bind_cols(southround4games) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nsouthround4 &lt;- rf_fit |&gt; predict(new_data = southround4games, type=\"prob\") |&gt;\n  bind_cols(southround4) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfourgames &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"North Carolina\"\n) |&gt; add_row(\n  team_short_display_name=\"Vermont\",\n  opponent_team_short_display_name=\"McNeese\"\n)\n\nfinalfourgames &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(finalfourgames)\n\nfinalfourgames &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(finalfourgames) \n\nfinalfour &lt;- rf_fit |&gt; predict(new_data = finalfourgames) |&gt;\n  bind_cols(finalfourgames) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nfinalfour &lt;- rf_fit |&gt; predict(new_data = finalfourgames, type=\"prob\") |&gt;\n  bind_cols(finalfour) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\nchampgame &lt;- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_team_short_display_name=\"Vermont\"\n) \n\nchampgame &lt;- modelgames |&gt; \n  group_by(team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"opponent\")) |&gt; \n  right_join(champgame)\n\nchampgame &lt;- modelgames |&gt; \n  group_by(opponent_team_short_display_name) |&gt; \n  filter(game_date == max(game_date) & season == 2024) |&gt; \n  ungroup() |&gt; \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) |&gt; \n  right_join(champgame) \n\nnatty &lt;- rf_fit |&gt; predict(new_data = champgame) |&gt;\n  bind_cols(champgame) |&gt; select(.pred_class, team_short_display_name, opponent_team_short_display_name, everything())\n\nnatty &lt;- rf_fit |&gt; predict(new_data = champgame, type=\"prob\") |&gt;\n  bind_cols(natty) |&gt; select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_team_short_display_name, everything())\n\n\nFirstly, I invested a lot in my predictors. Turnovers per possession seemed to be one of the most reliable predictors.In my line of thinking, how often a team turns the ball over in each of their possessions can be a strong indicator of how well they can score when they have the ball and avoid ruining the possession. You cannot score if you don’t have the ball and as has been seen numerous times in college basketball, turnovers are serious momentum killers. Looking back at the season of each team, I accounted for their season totals and also for their previous games to ensure that only games that had been played were factored in. I trusted my predictors and now, I am learning that more could have been done.\n\n\nCode\nsummary(game_recipe)  |&gt; \n  select(variable, role) |&gt; \n  filter(role != \"ID\") |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"The Main Culprit: The Predictors\",\n    subtitle = \"Turnovers per possession and efficiency. It can't go wrong, right?\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      The Main Culprit: The Predictors\n    \n    \n      Turnovers per possession and efficiency. It can't go wrong, right?\n    \n    \n      variable\n      role\n    \n  \n  \n    team_season_offensive_efficiency\npredictor\n    team_season_defensive_efficiency\npredictor\n    opponent_season_offensive_efficiency\npredictor\n    opponent_season_defensive_efficiency\npredictor\n    team_turnovers_per_possession\npredictor\n    opponent_turnovers_per_possession\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Jay Mingo\n    \n  \n  \n\n\n\n\nWith these predictors, I opted for the random forests model. Of my options, it yielded the most effectiveness. The model yielded about a 69% accuracy which was substantial enough for me to select it as my model of choice.\nI did not expect major success but after seeing my West bracket round one results, I began to drink an unreal amount of bracketology Kool-Aid.\nHere are the results:\n\n\nCode\nwestround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"West Regional: Round 1\",\n    subtitle = \"Even with Colgate winning, it was believable.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      West Regional: Round 1\n    \n    \n      Even with Colgate winning, it was believable.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Alabama\nW\n53.7%\nCharleston\n    North Carolina\nW\n71.6%\nWagner\n    Baylor\nW\n51.5%\nColgate\n    Dayton\nW\n55.4%\nNevada\n    Mississippi St\nL\n41.7%\nMichigan St\n    Saint Mary's\nL\n31.2%\nGrand Canyon\n    Arizona\nW\n56.0%\nLong Beach St\n    Clemson\nL\n48.3%\nNew Mexico\n  \n  \n    \n      By: Jay Mingo\n    \n  \n  \n\n\n\n\nOne incorrect pick thanks to my model. Colgate sneaking one away from Baylor, which was believable. Baylor’s season wasn’t much to write home about and an upset of the sort seemed plausible. Though not displayed above, my model originally picked Colgate, Clemson, and Saint Mary’s to win and one of those three were correct. One miracle away from a perfect regional.\n\n\nCode\neastround1 |&gt; \n  select(team_short_display_name, .pred_class, .pred_W, opponent_team_short_display_name) |&gt;\n  gt() |&gt; \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_team_short_display_name = \"Opponent\"\n  ) |&gt;\n  tab_header(\n    title = \"East Regional: Round 1\",\n    subtitle = \"It could have been worse.\"\n  ) |&gt;  \n  tab_source_note(\n    source_note = md(\"**By:** Jay Mingo\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) |&gt; \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) |&gt;\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) |&gt;\n  opt_row_striping() |&gt; \n  opt_table_lines(\"none\") |&gt;\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      East Regional: Round 1\n    \n    \n      It could have been worse.\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Illinois\nL\n46.0%\nMorehead St\n    Washington St\nL\n34.2%\nDrake\n    UConn\nW\n65.7%\nStetson\n    Iowa State\nL\n47.6%\nS Dakota St\n    FAU\nW\n57.5%\nNorthwestern\n    San Diego St\nW\n59.0%\nUAB\n    BYU\nW\n74.7%\nDuquesne\n    Auburn\nW\n53.7%\nYale\n  \n  \n    \n      By: Jay Mingo\n    \n  \n  \n\n\n\n\n25%. 2-for-8. If I were playing baseball, .250 would be decent, maybe even impressive if it were later in the season. However, I am not a MLB player and this was not baseball. Instead, it was the most mind-boggling, puzzling, and gut-wrenching portion of a bracket that I’ve ever seen. Besides the upsets of Auburn, BYU, and FAU, the lunacy of my model to predict South Dakota State, Morehead State, and Drake to win was almost infuriating. To make matters worse, three lost by five points or less, one hung around up until halftime, and the other could’ve won if they’d not blown in to end regulation, but I digress.\nThe best thing to come from the East Regional was predicting UConn all the way to a back-to-back national title, even if it was against the Catamounts of Vermont. Somehow, my worst regional gave me the eventual winner, but the path there was anything but great.\nIf a Final Four ends up with UConn, Alabama, Vermont, and McNeese, perhaps that is something to question. Even with this motley crew of teams that my model predicted, I finished with 910 points and in the top 71.6% of all brackets. There’s a lot I wish that I could go back and do over, things I’d change, but it could’ve been worse.\nI mean, finishing in the top 71.6% of many million brackets. That’s got to count for something, right?\nWho doesn’t love a finish in the top 7.6 million?"
  }
]